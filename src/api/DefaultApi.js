/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DoesHaveCVByStaffIdGETResponse', 'model/DoesHavePhotoByStaffIdGETResponse', 'model/GetBuildingByDomainIdModeByStaffIdGETResponse', 'model/GetBuildingByOrgUnitCodeModeByStaffIdGETResponse', 'model/GetCurrentGrantSizeByStaffIdGETResponse', 'model/GetDesciplineOptionsPOSTRequest', 'model/GetGrantSizeByStaffIdGETResponse', 'model/GetMembersByCodeListAndJobTypePOSTRequest', 'model/GetMembersByDomainListAndJobTypePOSTRequest', 'model/GetProfileUrlByDomainIdByDomainIdGETResponse', 'model/GetProfileUrlByOrgUnitCodeByOrgUnitCodeGETResponse', 'model/GetProjectSearchResultSizeByQueryStringGETResponse', 'model/GetPublicationsForGroupPOSTRequest', 'model/GetPublicationsPOSTRequest', 'model/GetSearchResultSizeByQueryStringGETResponse', 'model/GetStaffIdByUrlIdGETResponse', 'model/GetStaffProfileUrlByStaffIdGETResponse', 'model/GetStaffProfileUrlForReportingByStaffIdGETResponse', 'model/IsBlacklistedByStaffIdGETResponse', 'model/IsCurrentByStaffIdGETResponse', 'model/IsCurrentInDomainByStaffIdAndDomainIdGETResponse', 'model/IsCurrentInOrgUnitCodeByStaffIdGETResponse', 'model/UpdateCacheByStaffIdGETResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DoesHaveCVByStaffIdGETResponse'), require('../model/DoesHavePhotoByStaffIdGETResponse'), require('../model/GetBuildingByDomainIdModeByStaffIdGETResponse'), require('../model/GetBuildingByOrgUnitCodeModeByStaffIdGETResponse'), require('../model/GetCurrentGrantSizeByStaffIdGETResponse'), require('../model/GetDesciplineOptionsPOSTRequest'), require('../model/GetGrantSizeByStaffIdGETResponse'), require('../model/GetMembersByCodeListAndJobTypePOSTRequest'), require('../model/GetMembersByDomainListAndJobTypePOSTRequest'), require('../model/GetProfileUrlByDomainIdByDomainIdGETResponse'), require('../model/GetProfileUrlByOrgUnitCodeByOrgUnitCodeGETResponse'), require('../model/GetProjectSearchResultSizeByQueryStringGETResponse'), require('../model/GetPublicationsForGroupPOSTRequest'), require('../model/GetPublicationsPOSTRequest'), require('../model/GetSearchResultSizeByQueryStringGETResponse'), require('../model/GetStaffIdByUrlIdGETResponse'), require('../model/GetStaffProfileUrlByStaffIdGETResponse'), require('../model/GetStaffProfileUrlForReportingByStaffIdGETResponse'), require('../model/IsBlacklistedByStaffIdGETResponse'), require('../model/IsCurrentByStaffIdGETResponse'), require('../model/IsCurrentInDomainByStaffIdAndDomainIdGETResponse'), require('../model/IsCurrentInOrgUnitCodeByStaffIdGETResponse'), require('../model/UpdateCacheByStaffIdGETResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Api) {
      root.Api = {};
    }
    root.Api.DefaultApi = factory(root.Api.ApiClient, root.Api.DoesHaveCVByStaffIdGETResponse, root.Api.DoesHavePhotoByStaffIdGETResponse, root.Api.GetBuildingByDomainIdModeByStaffIdGETResponse, root.Api.GetBuildingByOrgUnitCodeModeByStaffIdGETResponse, root.Api.GetCurrentGrantSizeByStaffIdGETResponse, root.Api.GetDesciplineOptionsPOSTRequest, root.Api.GetGrantSizeByStaffIdGETResponse, root.Api.GetMembersByCodeListAndJobTypePOSTRequest, root.Api.GetMembersByDomainListAndJobTypePOSTRequest, root.Api.GetProfileUrlByDomainIdByDomainIdGETResponse, root.Api.GetProfileUrlByOrgUnitCodeByOrgUnitCodeGETResponse, root.Api.GetProjectSearchResultSizeByQueryStringGETResponse, root.Api.GetPublicationsForGroupPOSTRequest, root.Api.GetPublicationsPOSTRequest, root.Api.GetSearchResultSizeByQueryStringGETResponse, root.Api.GetStaffIdByUrlIdGETResponse, root.Api.GetStaffProfileUrlByStaffIdGETResponse, root.Api.GetStaffProfileUrlForReportingByStaffIdGETResponse, root.Api.IsBlacklistedByStaffIdGETResponse, root.Api.IsCurrentByStaffIdGETResponse, root.Api.IsCurrentInDomainByStaffIdAndDomainIdGETResponse, root.Api.IsCurrentInOrgUnitCodeByStaffIdGETResponse, root.Api.UpdateCacheByStaffIdGETResponse);
  }
}(this, function(ApiClient, DoesHaveCVByStaffIdGETResponse, DoesHavePhotoByStaffIdGETResponse, GetBuildingByDomainIdModeByStaffIdGETResponse, GetBuildingByOrgUnitCodeModeByStaffIdGETResponse, GetCurrentGrantSizeByStaffIdGETResponse, GetDesciplineOptionsPOSTRequest, GetGrantSizeByStaffIdGETResponse, GetMembersByCodeListAndJobTypePOSTRequest, GetMembersByDomainListAndJobTypePOSTRequest, GetProfileUrlByDomainIdByDomainIdGETResponse, GetProfileUrlByOrgUnitCodeByOrgUnitCodeGETResponse, GetProjectSearchResultSizeByQueryStringGETResponse, GetPublicationsForGroupPOSTRequest, GetPublicationsPOSTRequest, GetSearchResultSizeByQueryStringGETResponse, GetStaffIdByUrlIdGETResponse, GetStaffProfileUrlByStaffIdGETResponse, GetStaffProfileUrlForReportingByStaffIdGETResponse, IsBlacklistedByStaffIdGETResponse, IsCurrentByStaffIdGETResponse, IsCurrentInDomainByStaffIdAndDomainIdGETResponse, IsCurrentInOrgUnitCodeByStaffIdGETResponse, UpdateCacheByStaffIdGETResponse) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the checkingUrlIdByUrlIdGet operation.
     * @callback module:api/DefaultApi~checkingUrlIdByUrlIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CheckingUrlIdByUrlId_GET
     * 
     * @param {String} urlId 
     * @param {module:api/DefaultApi~checkingUrlIdByUrlIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.checkingUrlIdByUrlIdGet = function(urlId, callback) {
      var postBody = null;

      // verify the required parameter 'urlId' is set
      if (urlId === undefined || urlId === null) {
        throw new Error("Missing the required parameter 'urlId' when calling checkingUrlIdByUrlIdGet");
      }


      var pathParams = {
        'urlId': urlId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/checkingUrlId/{urlId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the doesHaveCVByStaffIdGet operation.
     * @callback module:api/DefaultApi~doesHaveCVByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DoesHaveCVByStaffIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DoesHaveCVByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~doesHaveCVByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DoesHaveCVByStaffIdGETResponse}
     */
    this.doesHaveCVByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling doesHaveCVByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DoesHaveCVByStaffIdGETResponse;

      return this.apiClient.callApi(
        '/doesHaveCV/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the doesHavePhotoByStaffIdGet operation.
     * @callback module:api/DefaultApi~doesHavePhotoByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DoesHavePhotoByStaffIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DoesHavePhotoByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~doesHavePhotoByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DoesHavePhotoByStaffIdGETResponse}
     */
    this.doesHavePhotoByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling doesHavePhotoByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DoesHavePhotoByStaffIdGETResponse;

      return this.apiClient.callApi(
        '/doesHavePhoto/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllStaffIdsGet operation.
     * @callback module:api/DefaultApi~getAllStaffIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetAllStaffIds_GET
     * 
     * @param {module:api/DefaultApi~getAllStaffIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getAllStaffIdsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getAllStaffIds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApproachOptionsByDomainIdGet operation.
     * @callback module:api/DefaultApi~getApproachOptionsByDomainIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetApproachOptionsByDomainId_GET
     * 
     * @param {String} domainId 
     * @param {module:api/DefaultApi~getApproachOptionsByDomainIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getApproachOptionsByDomainIdGet = function(domainId, callback) {
      var postBody = null;

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling getApproachOptionsByDomainIdGet");
      }


      var pathParams = {
        'domainId': domainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getApproachOptions/{domainId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorDetailsByStaffIdGet operation.
     * @callback module:api/DefaultApi~getAuthorDetailsByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetAuthorDetailsByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getAuthorDetailsByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getAuthorDetailsByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getAuthorDetailsByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getAuthorDetails/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorsNewKeywordsByStaffIdAndNewKeywordGroupIdGet operation.
     * @callback module:api/DefaultApi~getAuthorsNewKeywordsByStaffIdAndNewKeywordGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetAuthorsNewKeywordsByStaffId_GET
     * 
     * @param {Number} newKeywordGroupId 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getAuthorsNewKeywordsByStaffIdAndNewKeywordGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getAuthorsNewKeywordsByStaffIdAndNewKeywordGroupIdGet = function(newKeywordGroupId, staffId, callback) {
      var postBody = null;

      // verify the required parameter 'newKeywordGroupId' is set
      if (newKeywordGroupId === undefined || newKeywordGroupId === null) {
        throw new Error("Missing the required parameter 'newKeywordGroupId' when calling getAuthorsNewKeywordsByStaffIdAndNewKeywordGroupIdGet");
      }

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getAuthorsNewKeywordsByStaffIdAndNewKeywordGroupIdGet");
      }


      var pathParams = {
        'newKeywordGroupId': newKeywordGroupId,
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getAuthorsNewKeywords/{staffId}/{newKeywordGroupId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBookSellingLinksByStaffIdGet operation.
     * @callback module:api/DefaultApi~getBookSellingLinksByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetBookSellingLinksByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getBookSellingLinksByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getBookSellingLinksByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getBookSellingLinksByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getBookSellingLinks/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuildingByDomainIdModeByStaffIdAndDomainIdGet operation.
     * @callback module:api/DefaultApi~getBuildingByDomainIdModeByStaffIdAndDomainIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBuildingByDomainIdModeByStaffIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetBuildingByDomainIdModeByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {Number} domainId 
     * @param {String} mode 
     * @param {module:api/DefaultApi~getBuildingByDomainIdModeByStaffIdAndDomainIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBuildingByDomainIdModeByStaffIdGETResponse}
     */
    this.getBuildingByDomainIdModeByStaffIdAndDomainIdGet = function(staffId, domainId, mode, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getBuildingByDomainIdModeByStaffIdAndDomainIdGet");
      }

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling getBuildingByDomainIdModeByStaffIdAndDomainIdGet");
      }

      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getBuildingByDomainIdModeByStaffIdAndDomainIdGet");
      }


      var pathParams = {
        'staffId': staffId,
        'domainId': domainId,
        'mode': mode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetBuildingByDomainIdModeByStaffIdGETResponse;

      return this.apiClient.callApi(
        '/getBuildingByDomainId/{staffId}/{domainId}/{mode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuildingByOrgUnitCodeModeByStaffIdAndOrgUnitCodeGet operation.
     * @callback module:api/DefaultApi~getBuildingByOrgUnitCodeModeByStaffIdAndOrgUnitCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBuildingByOrgUnitCodeModeByStaffIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetBuildingByOrgUnitCodeModeByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {String} orgUnitCode 
     * @param {String} mode 
     * @param {module:api/DefaultApi~getBuildingByOrgUnitCodeModeByStaffIdAndOrgUnitCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBuildingByOrgUnitCodeModeByStaffIdGETResponse}
     */
    this.getBuildingByOrgUnitCodeModeByStaffIdAndOrgUnitCodeGet = function(staffId, orgUnitCode, mode, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getBuildingByOrgUnitCodeModeByStaffIdAndOrgUnitCodeGet");
      }

      // verify the required parameter 'orgUnitCode' is set
      if (orgUnitCode === undefined || orgUnitCode === null) {
        throw new Error("Missing the required parameter 'orgUnitCode' when calling getBuildingByOrgUnitCodeModeByStaffIdAndOrgUnitCodeGet");
      }

      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getBuildingByOrgUnitCodeModeByStaffIdAndOrgUnitCodeGet");
      }


      var pathParams = {
        'staffId': staffId,
        'orgUnitCode': orgUnitCode,
        'mode': mode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetBuildingByOrgUnitCodeModeByStaffIdGETResponse;

      return this.apiClient.callApi(
        '/getBuildingByOrgUnitCode/{staffId}/{orgUnitCode}/{mode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCentreListForStaffByStaffIdGet operation.
     * @callback module:api/DefaultApi~getCentreListForStaffByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetCentreListForStaffByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getCentreListForStaffByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getCentreListForStaffByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getCentreListForStaffByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getCentreListForStaff/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollaboratorByStaffIdGet operation.
     * @callback module:api/DefaultApi~getCollaboratorByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetCollaboratorByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getCollaboratorByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getCollaboratorByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getCollaboratorByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getCollaborator/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountryOptionsByDomainIdGet operation.
     * @callback module:api/DefaultApi~getCountryOptionsByDomainIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetCountryOptionsByDomainId_GET
     * 
     * @param {String} domainId 
     * @param {module:api/DefaultApi~getCountryOptionsByDomainIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getCountryOptionsByDomainIdGet = function(domainId, callback) {
      var postBody = null;

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling getCountryOptionsByDomainIdGet");
      }


      var pathParams = {
        'domainId': domainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getCountryOptions/{domainId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentGrantSizeByStaffIdGet operation.
     * @callback module:api/DefaultApi~getCurrentGrantSizeByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCurrentGrantSizeByStaffIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetCurrentGrantSizeByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getCurrentGrantSizeByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCurrentGrantSizeByStaffIdGETResponse}
     */
    this.getCurrentGrantSizeByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getCurrentGrantSizeByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCurrentGrantSizeByStaffIdGETResponse;

      return this.apiClient.callApi(
        '/getCurrentGrantSize/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepartmentMembersByCodeGet operation.
     * @callback module:api/DefaultApi~getDepartmentMembersByCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetDepartmentMembersByCode_GET
     * 
     * @param {String} code 
     * @param {module:api/DefaultApi~getDepartmentMembersByCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDepartmentMembersByCodeGet = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getDepartmentMembersByCodeGet");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getDepartmentMembers/{code}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDesciplineOptionsPost operation.
     * @callback module:api/DefaultApi~getDesciplineOptionsPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetDesciplineOptions_POST
     * 
     * @param {module:model/GetDesciplineOptionsPOSTRequest} body 
     * @param {module:api/DefaultApi~getDesciplineOptionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDesciplineOptionsPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getDesciplineOptionsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getDesciplineOptions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainMembersByDomainIdGet operation.
     * @callback module:api/DefaultApi~getDomainMembersByDomainIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetDomainMembersByDomainId_GET
     * 
     * @param {String} domainId 
     * @param {module:api/DefaultApi~getDomainMembersByDomainIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDomainMembersByDomainIdGet = function(domainId, callback) {
      var postBody = null;

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling getDomainMembersByDomainIdGet");
      }


      var pathParams = {
        'domainId': domainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getDomainMembers/{domainId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainMembersWithExpertiseInfoByDomainIdGet operation.
     * @callback module:api/DefaultApi~getDomainMembersWithExpertiseInfoByDomainIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetDomainMembersWithExpertiseInfo_GET
     * 
     * @param {String} domainId 
     * @param {module:api/DefaultApi~getDomainMembersWithExpertiseInfoByDomainIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDomainMembersWithExpertiseInfoByDomainIdGet = function(domainId, callback) {
      var postBody = null;

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling getDomainMembersWithExpertiseInfoByDomainIdGet");
      }


      var pathParams = {
        'domainId': domainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getDomainMembersWithExpertiseInfo/{domainId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainOptionsGet operation.
     * @callback module:api/DefaultApi~getDomainOptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetDomainOptions_GET
     * 
     * @param {module:api/DefaultApi~getDomainOptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDomainOptionsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getDomainOptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpertiseDetailsByStaffIdGet operation.
     * @callback module:api/DefaultApi~getExpertiseDetailsByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetExpertiseDetailsByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getExpertiseDetailsByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getExpertiseDetailsByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getExpertiseDetailsByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getExpertiseDetails/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGrantDetailsByStaffIdGet operation.
     * @callback module:api/DefaultApi~getGrantDetailsByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetGrantDetailsByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getGrantDetailsByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getGrantDetailsByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getGrantDetailsByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getGrantDetails/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGrantSizeByStaffIdGet operation.
     * @callback module:api/DefaultApi~getGrantSizeByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGrantSizeByStaffIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetGrantSizeByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getGrantSizeByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGrantSizeByStaffIdGETResponse}
     */
    this.getGrantSizeByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getGrantSizeByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetGrantSizeByStaffIdGETResponse;

      return this.apiClient.callApi(
        '/getGrantSize/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGrantsForCentreByCentreIdGet operation.
     * @callback module:api/DefaultApi~getGrantsForCentreByCentreIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetGrantsForCentreByCentreId_GET
     * 
     * @param {String} centreId 
     * @param {module:api/DefaultApi~getGrantsForCentreByCentreIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getGrantsForCentreByCentreIdGet = function(centreId, callback) {
      var postBody = null;

      // verify the required parameter 'centreId' is set
      if (centreId === undefined || centreId === null) {
        throw new Error("Missing the required parameter 'centreId' when calling getGrantsForCentreByCentreIdGet");
      }


      var pathParams = {
        'centreId': centreId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getGrantsForCentre/{centreId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHonoursProjectByProjIdGet operation.
     * @callback module:api/DefaultApi~getHonoursProjectByProjIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetHonoursProjectByProjId_GET
     * 
     * @param {String} projId 
     * @param {module:api/DefaultApi~getHonoursProjectByProjIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getHonoursProjectByProjIdGet = function(projId, callback) {
      var postBody = null;

      // verify the required parameter 'projId' is set
      if (projId === undefined || projId === null) {
        throw new Error("Missing the required parameter 'projId' when calling getHonoursProjectByProjIdGet");
      }


      var pathParams = {
        'projId': projId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getHonoursProject/{projId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHonoursSupervisorByStaffIdGet operation.
     * @callback module:api/DefaultApi~getHonoursSupervisorByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetHonoursSupervisorByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getHonoursSupervisorByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getHonoursSupervisorByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getHonoursSupervisorByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getHonoursSupervisor/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHrPersonByStaffIdGet operation.
     * @callback module:api/DefaultApi~getHrPersonByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetHrPersonByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getHrPersonByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getHrPersonByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getHrPersonByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getHrPerson/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKeywordOptionsByDomainIdGet operation.
     * @callback module:api/DefaultApi~getKeywordOptionsByDomainIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetKeywordOptionsByDomainId_GET
     * 
     * @param {String} domainId 
     * @param {module:api/DefaultApi~getKeywordOptionsByDomainIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getKeywordOptionsByDomainIdGet = function(domainId, callback) {
      var postBody = null;

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling getKeywordOptionsByDomainIdGet");
      }


      var pathParams = {
        'domainId': domainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getKeywordOptions/{domainId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaKeywordsByStaffIdGet operation.
     * @callback module:api/DefaultApi~getMediaKeywordsByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetMediaKeywordsByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getMediaKeywordsByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getMediaKeywordsByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getMediaKeywordsByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getMediaKeywords/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersByCodeAndJobTypeByCodeAndJobTypeGet operation.
     * @callback module:api/DefaultApi~getMembersByCodeAndJobTypeByCodeAndJobTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetMembersByCodeAndJobTypeByCode_GET
     * 
     * @param {String} code 
     * @param {Number} jobType 
     * @param {module:api/DefaultApi~getMembersByCodeAndJobTypeByCodeAndJobTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getMembersByCodeAndJobTypeByCodeAndJobTypeGet = function(code, jobType, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getMembersByCodeAndJobTypeByCodeAndJobTypeGet");
      }

      // verify the required parameter 'jobType' is set
      if (jobType === undefined || jobType === null) {
        throw new Error("Missing the required parameter 'jobType' when calling getMembersByCodeAndJobTypeByCodeAndJobTypeGet");
      }


      var pathParams = {
        'code': code,
        'jobType': jobType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getMembersByCodeAndJobType/{code}/{jobType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersByCodeListAndJobTypePost operation.
     * @callback module:api/DefaultApi~getMembersByCodeListAndJobTypePostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetMembersByCodeListAndJobType_POST
     * 
     * @param {module:model/GetMembersByCodeListAndJobTypePOSTRequest} body 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.jobType 
     * @param {module:api/DefaultApi~getMembersByCodeListAndJobTypePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getMembersByCodeListAndJobTypePost = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getMembersByCodeListAndJobTypePost");
      }


      var pathParams = {
      };
      var queryParams = {
        'jobType': opts['jobType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getMembersByCodeListAndJobType', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersByDomainAndJobTypeByDomainIdAndJobTypeGet operation.
     * @callback module:api/DefaultApi~getMembersByDomainAndJobTypeByDomainIdAndJobTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetMembersByDomainAndJobTypeByDomainId_GET
     * 
     * @param {String} domainId 
     * @param {Number} jobType 
     * @param {module:api/DefaultApi~getMembersByDomainAndJobTypeByDomainIdAndJobTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getMembersByDomainAndJobTypeByDomainIdAndJobTypeGet = function(domainId, jobType, callback) {
      var postBody = null;

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling getMembersByDomainAndJobTypeByDomainIdAndJobTypeGet");
      }

      // verify the required parameter 'jobType' is set
      if (jobType === undefined || jobType === null) {
        throw new Error("Missing the required parameter 'jobType' when calling getMembersByDomainAndJobTypeByDomainIdAndJobTypeGet");
      }


      var pathParams = {
        'domainId': domainId,
        'jobType': jobType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getMembersByDomainAndJobType/{domainId}/{jobType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersByDomainListAndJobTypePost operation.
     * @callback module:api/DefaultApi~getMembersByDomainListAndJobTypePostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetMembersByDomainListAndJobType_POST
     * 
     * @param {module:model/GetMembersByDomainListAndJobTypePOSTRequest} body 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.jobType 
     * @param {module:api/DefaultApi~getMembersByDomainListAndJobTypePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getMembersByDomainListAndJobTypePost = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getMembersByDomainListAndJobTypePost");
      }


      var pathParams = {
      };
      var queryParams = {
        'jobType': opts['jobType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getMembersByDomainListAndJobType', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewKeywordsByGroupByNewKeywordGroupIdGet operation.
     * @callback module:api/DefaultApi~getNewKeywordsByGroupByNewKeywordGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetNewKeywordsByGroupByNewKeywordGroupId_GET
     * 
     * @param {Number} newKeywordGroupId 
     * @param {module:api/DefaultApi~getNewKeywordsByGroupByNewKeywordGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNewKeywordsByGroupByNewKeywordGroupIdGet = function(newKeywordGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'newKeywordGroupId' is set
      if (newKeywordGroupId === undefined || newKeywordGroupId === null) {
        throw new Error("Missing the required parameter 'newKeywordGroupId' when calling getNewKeywordsByGroupByNewKeywordGroupIdGet");
      }


      var pathParams = {
        'newKeywordGroupId': newKeywordGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getNewKeywordsByGroup/{newKeywordGroupId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrgUnitsByTypeByTypeGet operation.
     * @callback module:api/DefaultApi~getOrgUnitsByTypeByTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetOrgUnitsByTypeByType_GET
     * 
     * @param {Number} type 
     * @param {module:api/DefaultApi~getOrgUnitsByTypeByTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrgUnitsByTypeByTypeGet = function(type, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getOrgUnitsByTypeByTypeGet");
      }


      var pathParams = {
        'type': type
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getOrgUnitsByType/{type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfileUrlByDomainIdByDomainIdGet operation.
     * @callback module:api/DefaultApi~getProfileUrlByDomainIdByDomainIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProfileUrlByDomainIdByDomainIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetProfileUrlByDomainIdByDomainId_GET
     * 
     * @param {Number} domainId 
     * @param {module:api/DefaultApi~getProfileUrlByDomainIdByDomainIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProfileUrlByDomainIdByDomainIdGETResponse}
     */
    this.getProfileUrlByDomainIdByDomainIdGet = function(domainId, callback) {
      var postBody = null;

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling getProfileUrlByDomainIdByDomainIdGet");
      }


      var pathParams = {
        'domainId': domainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetProfileUrlByDomainIdByDomainIdGETResponse;

      return this.apiClient.callApi(
        '/getProfileUrlByDomainId/{domainId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfileUrlByOrgUnitCodeByOrgUnitCodeGet operation.
     * @callback module:api/DefaultApi~getProfileUrlByOrgUnitCodeByOrgUnitCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProfileUrlByOrgUnitCodeByOrgUnitCodeGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetProfileUrlByOrgUnitCodeByOrgUnitCode_GET
     * 
     * @param {String} orgUnitCode 
     * @param {module:api/DefaultApi~getProfileUrlByOrgUnitCodeByOrgUnitCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProfileUrlByOrgUnitCodeByOrgUnitCodeGETResponse}
     */
    this.getProfileUrlByOrgUnitCodeByOrgUnitCodeGet = function(orgUnitCode, callback) {
      var postBody = null;

      // verify the required parameter 'orgUnitCode' is set
      if (orgUnitCode === undefined || orgUnitCode === null) {
        throw new Error("Missing the required parameter 'orgUnitCode' when calling getProfileUrlByOrgUnitCodeByOrgUnitCodeGet");
      }


      var pathParams = {
        'orgUnitCode': orgUnitCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetProfileUrlByOrgUnitCodeByOrgUnitCodeGETResponse;

      return this.apiClient.callApi(
        '/getProfileUrlByOrgUnitCode/{orgUnitCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectSearchResultSizeByQueryStringGet operation.
     * @callback module:api/DefaultApi~getProjectSearchResultSizeByQueryStringGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProjectSearchResultSizeByQueryStringGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetProjectSearchResultSizeByQueryString_GET
     * 
     * @param {String} queryString 
     * @param {module:api/DefaultApi~getProjectSearchResultSizeByQueryStringGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProjectSearchResultSizeByQueryStringGETResponse}
     */
    this.getProjectSearchResultSizeByQueryStringGet = function(queryString, callback) {
      var postBody = null;

      // verify the required parameter 'queryString' is set
      if (queryString === undefined || queryString === null) {
        throw new Error("Missing the required parameter 'queryString' when calling getProjectSearchResultSizeByQueryStringGet");
      }


      var pathParams = {
        'queryString': queryString
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetProjectSearchResultSizeByQueryStringGETResponse;

      return this.apiClient.callApi(
        '/getProjectSearchResultSize/{queryString}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicationAuthorByYearYEndByStaffIdAndYStartGet operation.
     * @callback module:api/DefaultApi~getPublicationAuthorByYearYEndByStaffIdAndYStartGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPublicationAuthorByYearYEndByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {String} yStart 
     * @param {String} yEnd 
     * @param {module:api/DefaultApi~getPublicationAuthorByYearYEndByStaffIdAndYStartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getPublicationAuthorByYearYEndByStaffIdAndYStartGet = function(staffId, yStart, yEnd, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getPublicationAuthorByYearYEndByStaffIdAndYStartGet");
      }

      // verify the required parameter 'yStart' is set
      if (yStart === undefined || yStart === null) {
        throw new Error("Missing the required parameter 'yStart' when calling getPublicationAuthorByYearYEndByStaffIdAndYStartGet");
      }

      // verify the required parameter 'yEnd' is set
      if (yEnd === undefined || yEnd === null) {
        throw new Error("Missing the required parameter 'yEnd' when calling getPublicationAuthorByYearYEndByStaffIdAndYStartGet");
      }


      var pathParams = {
        'staffId': staffId,
        'yStart': yStart,
        'yEnd': yEnd
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getPublicationAuthorByYear/{staffId}/{yStart}/{yEnd}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicationsForCentreByCentreIdGet operation.
     * @callback module:api/DefaultApi~getPublicationsForCentreByCentreIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPublicationsForCentreByCentreId_GET
     * 
     * @param {String} centreId 
     * @param {module:api/DefaultApi~getPublicationsForCentreByCentreIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getPublicationsForCentreByCentreIdGet = function(centreId, callback) {
      var postBody = null;

      // verify the required parameter 'centreId' is set
      if (centreId === undefined || centreId === null) {
        throw new Error("Missing the required parameter 'centreId' when calling getPublicationsForCentreByCentreIdGet");
      }


      var pathParams = {
        'centreId': centreId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getPublicationsForCentre/{centreId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicationsForGroupPost operation.
     * @callback module:api/DefaultApi~getPublicationsForGroupPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPublicationsForGroup_POST
     * 
     * @param {module:model/GetPublicationsForGroupPOSTRequest} body 
     * @param {module:api/DefaultApi~getPublicationsForGroupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getPublicationsForGroupPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getPublicationsForGroupPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getPublicationsForGroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicationsPost operation.
     * @callback module:api/DefaultApi~getPublicationsPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPublications_POST
     * 
     * @param {module:model/GetPublicationsPOSTRequest} body 
     * @param {module:api/DefaultApi~getPublicationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getPublicationsPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getPublicationsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getPublications', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublishingActiveAuthorByStaffIdGet operation.
     * @callback module:api/DefaultApi~getPublishingActiveAuthorByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPublishingActiveAuthorByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getPublishingActiveAuthorByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getPublishingActiveAuthorByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getPublishingActiveAuthorByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getPublishingActiveAuthor/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResearchSupervisorByStaffIdGet operation.
     * @callback module:api/DefaultApi~getResearchSupervisorByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetResearchSupervisorByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getResearchSupervisorByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getResearchSupervisorByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getResearchSupervisorByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getResearchSupervisor/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSearchResultSizeByQueryStringGet operation.
     * @callback module:api/DefaultApi~getSearchResultSizeByQueryStringGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSearchResultSizeByQueryStringGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetSearchResultSizeByQueryString_GET
     * 
     * @param {String} queryString 
     * @param {module:api/DefaultApi~getSearchResultSizeByQueryStringGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSearchResultSizeByQueryStringGETResponse}
     */
    this.getSearchResultSizeByQueryStringGet = function(queryString, callback) {
      var postBody = null;

      // verify the required parameter 'queryString' is set
      if (queryString === undefined || queryString === null) {
        throw new Error("Missing the required parameter 'queryString' when calling getSearchResultSizeByQueryStringGet");
      }


      var pathParams = {
        'queryString': queryString
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSearchResultSizeByQueryStringGETResponse;

      return this.apiClient.callApi(
        '/getSearchResultSize/{queryString}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelectOptionsByCategoryAndDomainIdGet operation.
     * @callback module:api/DefaultApi~getSelectOptionsByCategoryAndDomainIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetSelectOptionsByCategoryAndDomainId_GET
     * 
     * @param {String} category 
     * @param {String} domainId 
     * @param {module:api/DefaultApi~getSelectOptionsByCategoryAndDomainIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getSelectOptionsByCategoryAndDomainIdGet = function(category, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling getSelectOptionsByCategoryAndDomainIdGet");
      }

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling getSelectOptionsByCategoryAndDomainIdGet");
      }


      var pathParams = {
        'category': category,
        'domainId': domainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getSelectOptions/{category}/{domainId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStaffIdByUrlIdGet operation.
     * @callback module:api/DefaultApi~getStaffIdByUrlIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStaffIdByUrlIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetStaffIdByUrlId_GET
     * 
     * @param {String} urlId 
     * @param {module:api/DefaultApi~getStaffIdByUrlIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStaffIdByUrlIdGETResponse}
     */
    this.getStaffIdByUrlIdGet = function(urlId, callback) {
      var postBody = null;

      // verify the required parameter 'urlId' is set
      if (urlId === undefined || urlId === null) {
        throw new Error("Missing the required parameter 'urlId' when calling getStaffIdByUrlIdGet");
      }


      var pathParams = {
        'urlId': urlId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetStaffIdByUrlIdGETResponse;

      return this.apiClient.callApi(
        '/getStaffId/{urlId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStaffListByCentreIdByCentreIdGet operation.
     * @callback module:api/DefaultApi~getStaffListByCentreIdByCentreIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetStaffListByCentreIdByCentreId_GET
     * 
     * @param {String} centreId 
     * @param {module:api/DefaultApi~getStaffListByCentreIdByCentreIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getStaffListByCentreIdByCentreIdGet = function(centreId, callback) {
      var postBody = null;

      // verify the required parameter 'centreId' is set
      if (centreId === undefined || centreId === null) {
        throw new Error("Missing the required parameter 'centreId' when calling getStaffListByCentreIdByCentreIdGet");
      }


      var pathParams = {
        'centreId': centreId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getStaffListByCentreId/{centreId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStaffListByIRMACenterIdByCenterIdGet operation.
     * @callback module:api/DefaultApi~getStaffListByIRMACenterIdByCenterIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetStaffListByIRMACenterIdByCenterId_GET
     * 
     * @param {String} centerId 
     * @param {module:api/DefaultApi~getStaffListByIRMACenterIdByCenterIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getStaffListByIRMACenterIdByCenterIdGet = function(centerId, callback) {
      var postBody = null;

      // verify the required parameter 'centerId' is set
      if (centerId === undefined || centerId === null) {
        throw new Error("Missing the required parameter 'centerId' when calling getStaffListByIRMACenterIdByCenterIdGet");
      }


      var pathParams = {
        'centerId': centerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getStaffListByIRMACenterId/{centerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStaffProfileUrlByStaffIdGet operation.
     * @callback module:api/DefaultApi~getStaffProfileUrlByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStaffProfileUrlByStaffIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetStaffProfileUrlByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getStaffProfileUrlByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStaffProfileUrlByStaffIdGETResponse}
     */
    this.getStaffProfileUrlByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getStaffProfileUrlByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetStaffProfileUrlByStaffIdGETResponse;

      return this.apiClient.callApi(
        '/getStaffProfileUrl/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStaffProfileUrlForReportingByStaffIdGet operation.
     * @callback module:api/DefaultApi~getStaffProfileUrlForReportingByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStaffProfileUrlForReportingByStaffIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetStaffProfileUrlForReportingByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getStaffProfileUrlForReportingByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStaffProfileUrlForReportingByStaffIdGETResponse}
     */
    this.getStaffProfileUrlForReportingByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getStaffProfileUrlForReportingByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetStaffProfileUrlForReportingByStaffIdGETResponse;

      return this.apiClient.callApi(
        '/getStaffProfileUrlForReporting/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStaffSearchFieldsGet operation.
     * @callback module:api/DefaultApi~getStaffSearchFieldsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetStaffSearchFields_GET
     * 
     * @param {module:api/DefaultApi~getStaffSearchFieldsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getStaffSearchFieldsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getStaffSearchFields', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStaffSearchSortingFieldsGet operation.
     * @callback module:api/DefaultApi~getStaffSearchSortingFieldsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetStaffSearchSortingFields_GET
     * 
     * @param {module:api/DefaultApi~getStaffSearchSortingFieldsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getStaffSearchSortingFieldsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getStaffSearchSortingFields', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupervisedStudentsByStaffIdGet operation.
     * @callback module:api/DefaultApi~getSupervisedStudentsByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetSupervisedStudentsByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getSupervisedStudentsByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getSupervisedStudentsByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getSupervisedStudentsByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getSupervisedStudents/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getThemeOptionsByDomainIdGet operation.
     * @callback module:api/DefaultApi~getThemeOptionsByDomainIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetThemeOptionsByDomainId_GET
     * 
     * @param {String} domainId 
     * @param {module:api/DefaultApi~getThemeOptionsByDomainIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getThemeOptionsByDomainIdGet = function(domainId, callback) {
      var postBody = null;

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling getThemeOptionsByDomainIdGet");
      }


      var pathParams = {
        'domainId': domainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getThemeOptions/{domainId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getThemeOptionsByOrgUnitCodeByOrgUnitCodeGet operation.
     * @callback module:api/DefaultApi~getThemeOptionsByOrgUnitCodeByOrgUnitCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetThemeOptionsByOrgUnitCode_GET
     * 
     * @param {String} orgUnitCode 
     * @param {module:api/DefaultApi~getThemeOptionsByOrgUnitCodeByOrgUnitCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getThemeOptionsByOrgUnitCodeByOrgUnitCodeGet = function(orgUnitCode, callback) {
      var postBody = null;

      // verify the required parameter 'orgUnitCode' is set
      if (orgUnitCode === undefined || orgUnitCode === null) {
        throw new Error("Missing the required parameter 'orgUnitCode' when calling getThemeOptionsByOrgUnitCodeByOrgUnitCodeGet");
      }


      var pathParams = {
        'orgUnitCode': orgUnitCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getThemeOptionsByOrgUnitCode/{orgUnitCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getThemesByStaffIdGet operation.
     * @callback module:api/DefaultApi~getThemesByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetThemesByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getThemesByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getThemesByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getThemesByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getThemes/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getThesisListByStaffIdGet operation.
     * @callback module:api/DefaultApi~getThesisListByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetThesisListByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~getThesisListByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getThesisListByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling getThesisListByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/getThesisList/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the isBlacklistedByStaffIdGet operation.
     * @callback module:api/DefaultApi~isBlacklistedByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsBlacklistedByStaffIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IsBlacklistedByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~isBlacklistedByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsBlacklistedByStaffIdGETResponse}
     */
    this.isBlacklistedByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling isBlacklistedByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IsBlacklistedByStaffIdGETResponse;

      return this.apiClient.callApi(
        '/isBlacklisted/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the isCurrentByStaffIdGet operation.
     * @callback module:api/DefaultApi~isCurrentByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsCurrentByStaffIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IsCurrentByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~isCurrentByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsCurrentByStaffIdGETResponse}
     */
    this.isCurrentByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling isCurrentByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IsCurrentByStaffIdGETResponse;

      return this.apiClient.callApi(
        '/isCurrent/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the isCurrentInDomainByStaffIdAndDomainIdGet operation.
     * @callback module:api/DefaultApi~isCurrentInDomainByStaffIdAndDomainIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsCurrentInDomainByStaffIdAndDomainIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IsCurrentInDomainByStaffIdAndDomainId_GET
     * 
     * @param {String} staffId 
     * @param {String} domainId 
     * @param {module:api/DefaultApi~isCurrentInDomainByStaffIdAndDomainIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsCurrentInDomainByStaffIdAndDomainIdGETResponse}
     */
    this.isCurrentInDomainByStaffIdAndDomainIdGet = function(staffId, domainId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling isCurrentInDomainByStaffIdAndDomainIdGet");
      }

      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling isCurrentInDomainByStaffIdAndDomainIdGet");
      }


      var pathParams = {
        'staffId': staffId,
        'domainId': domainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IsCurrentInDomainByStaffIdAndDomainIdGETResponse;

      return this.apiClient.callApi(
        '/isCurrentInDomain/{staffId}/{domainId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the isCurrentInOrgUnitCodeByStaffIdAndOrgUnitCodeGet operation.
     * @callback module:api/DefaultApi~isCurrentInOrgUnitCodeByStaffIdAndOrgUnitCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsCurrentInOrgUnitCodeByStaffIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IsCurrentInOrgUnitCodeByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {String} orgUnitCode 
     * @param {module:api/DefaultApi~isCurrentInOrgUnitCodeByStaffIdAndOrgUnitCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsCurrentInOrgUnitCodeByStaffIdGETResponse}
     */
    this.isCurrentInOrgUnitCodeByStaffIdAndOrgUnitCodeGet = function(staffId, orgUnitCode, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling isCurrentInOrgUnitCodeByStaffIdAndOrgUnitCodeGet");
      }

      // verify the required parameter 'orgUnitCode' is set
      if (orgUnitCode === undefined || orgUnitCode === null) {
        throw new Error("Missing the required parameter 'orgUnitCode' when calling isCurrentInOrgUnitCodeByStaffIdAndOrgUnitCodeGet");
      }


      var pathParams = {
        'staffId': staffId,
        'orgUnitCode': orgUnitCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IsCurrentInOrgUnitCodeByStaffIdGETResponse;

      return this.apiClient.callApi(
        '/isCurrentInOrgUnitCode/{staffId}/{orgUnitCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the performProjectSearchRangeSortIsReverseByQueryStringAndStartIndexGet operation.
     * @callback module:api/DefaultApi~performProjectSearchRangeSortIsReverseByQueryStringAndStartIndexGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PerformProjectSearchRangeSortIsReverse_GET
     * 
     * @param {String} queryString 
     * @param {Number} startIndex 
     * @param {Number} range 
     * @param {String} sort 
     * @param {Boolean} isReverse 
     * @param {module:api/DefaultApi~performProjectSearchRangeSortIsReverseByQueryStringAndStartIndexGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.performProjectSearchRangeSortIsReverseByQueryStringAndStartIndexGet = function(queryString, startIndex, range, sort, isReverse, callback) {
      var postBody = null;

      // verify the required parameter 'queryString' is set
      if (queryString === undefined || queryString === null) {
        throw new Error("Missing the required parameter 'queryString' when calling performProjectSearchRangeSortIsReverseByQueryStringAndStartIndexGet");
      }

      // verify the required parameter 'startIndex' is set
      if (startIndex === undefined || startIndex === null) {
        throw new Error("Missing the required parameter 'startIndex' when calling performProjectSearchRangeSortIsReverseByQueryStringAndStartIndexGet");
      }

      // verify the required parameter 'range' is set
      if (range === undefined || range === null) {
        throw new Error("Missing the required parameter 'range' when calling performProjectSearchRangeSortIsReverseByQueryStringAndStartIndexGet");
      }

      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling performProjectSearchRangeSortIsReverseByQueryStringAndStartIndexGet");
      }

      // verify the required parameter 'isReverse' is set
      if (isReverse === undefined || isReverse === null) {
        throw new Error("Missing the required parameter 'isReverse' when calling performProjectSearchRangeSortIsReverseByQueryStringAndStartIndexGet");
      }


      var pathParams = {
        'queryString': queryString,
        'startIndex': startIndex,
        'range': range,
        'sort': sort,
        'isReverse': isReverse
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/performProjectSearch/{queryString}/{startIndex}/{range}/{sort}/{isReverse}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the performSimpleAttributeSearchRangeSortIsReverseByQueryStringAndStartIndexGet operation.
     * @callback module:api/DefaultApi~performSimpleAttributeSearchRangeSortIsReverseByQueryStringAndStartIndexGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PerformSimpleAttributeSearchRangeSortIsReverse_GET
     * 
     * @param {String} queryString 
     * @param {Number} startIndex 
     * @param {Number} range 
     * @param {String} sort 
     * @param {Boolean} isReverse 
     * @param {module:api/DefaultApi~performSimpleAttributeSearchRangeSortIsReverseByQueryStringAndStartIndexGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.performSimpleAttributeSearchRangeSortIsReverseByQueryStringAndStartIndexGet = function(queryString, startIndex, range, sort, isReverse, callback) {
      var postBody = null;

      // verify the required parameter 'queryString' is set
      if (queryString === undefined || queryString === null) {
        throw new Error("Missing the required parameter 'queryString' when calling performSimpleAttributeSearchRangeSortIsReverseByQueryStringAndStartIndexGet");
      }

      // verify the required parameter 'startIndex' is set
      if (startIndex === undefined || startIndex === null) {
        throw new Error("Missing the required parameter 'startIndex' when calling performSimpleAttributeSearchRangeSortIsReverseByQueryStringAndStartIndexGet");
      }

      // verify the required parameter 'range' is set
      if (range === undefined || range === null) {
        throw new Error("Missing the required parameter 'range' when calling performSimpleAttributeSearchRangeSortIsReverseByQueryStringAndStartIndexGet");
      }

      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling performSimpleAttributeSearchRangeSortIsReverseByQueryStringAndStartIndexGet");
      }

      // verify the required parameter 'isReverse' is set
      if (isReverse === undefined || isReverse === null) {
        throw new Error("Missing the required parameter 'isReverse' when calling performSimpleAttributeSearchRangeSortIsReverseByQueryStringAndStartIndexGet");
      }


      var pathParams = {
        'queryString': queryString,
        'startIndex': startIndex,
        'range': range,
        'sort': sort,
        'isReverse': isReverse
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/performSimpleAttributeSearch/{queryString}/{startIndex}/{range}/{sort}/{isReverse}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCacheByStaffIdGet operation.
     * @callback module:api/DefaultApi~updateCacheByStaffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCacheByStaffIdGETResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateCacheByStaffId_GET
     * 
     * @param {String} staffId 
     * @param {module:api/DefaultApi~updateCacheByStaffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCacheByStaffIdGETResponse}
     */
    this.updateCacheByStaffIdGet = function(staffId, callback) {
      var postBody = null;

      // verify the required parameter 'staffId' is set
      if (staffId === undefined || staffId === null) {
        throw new Error("Missing the required parameter 'staffId' when calling updateCacheByStaffIdGet");
      }


      var pathParams = {
        'staffId': staffId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateCacheByStaffIdGETResponse;

      return this.apiClient.callApi(
        '/updateCache/{staffId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
